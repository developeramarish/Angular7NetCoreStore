// <auto-generated />
using System;
using Angular7NetCoreStore.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Angular7NetCoreStore.Infra.Data.Migrations
{
    [DbContext(typeof(Angular7NetCoreStoreContext))]
    [Migration("20190419220325_AddCreateAndUpdateDates")]
    partial class AddCreateAndUpdateDates
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Angular7NetCoreStore.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("BirthDate");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Angular7NetCoreStore.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("OrderId");

                    b.Property<decimal>("Price");

                    b.Property<Guid?>("ProductId");

                    b.Property<decimal>("Quantity");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Angular7NetCoreStore.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.Property<decimal>("Price");

                    b.Property<decimal>("QuantityOnHand");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("76bf59f0-ffb0-401c-b460-6868d8f924b4"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Guitarra Ibanex GRG220 Preta",
                            Image = "https://http2.mlstatic.com/guitarra-electrica-ibanez-gio-grg220dex-D_NQ_NP_760329-MLV27359093213_052018-F.jpg",
                            Price = 1200m,
                            QuantityOnHand = 50m,
                            Title = "Guitarra Ibanex GRG220",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5d272276-891c-469a-a653-04f075b2c51a"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Samsung s9",
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRh_iIgH_ErtqFO1tiMpysB3Z5VeJUjaThLCtKkajwXA_V4GXkp",
                            Price = 2000m,
                            QuantityOnHand = 50m,
                            Title = "Celular S9",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f2118dcc-60fd-427d-819b-52b2f0ded139"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kindle new generation",
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSHmy5pzaQxrs4nzLNXP0Ca-1zkBgzfLCwOMjxmDFDx02FGSzI6",
                            Price = 200m,
                            QuantityOnHand = 50m,
                            Title = "Kindle",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Angular7NetCoreStore.Domain.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("CustomerId");

                    b.Property<int>("Status");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Angular7NetCoreStore.Domain.Entities.Customer", b =>
                {
                    b.OwnsOne("Angular7NetCoreStore.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("CustomerId");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(200);

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.HasOne("Angular7NetCoreStore.Domain.Entities.Customer")
                                .WithOne("Email")
                                .HasForeignKey("Angular7NetCoreStore.Domain.ValueObjects.Email", "CustomerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Angular7NetCoreStore.Domain.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("CustomerId");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100);

                            b1.Property<string>("Surname")
                                .IsRequired()
                                .HasMaxLength(200);

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.HasOne("Angular7NetCoreStore.Domain.Entities.Customer")
                                .WithOne("FullName")
                                .HasForeignKey("Angular7NetCoreStore.Domain.ValueObjects.FullName", "CustomerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Angular7NetCoreStore.Domain.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("CustomerId");

                            b1.Property<string>("AreaCode")
                                .IsRequired()
                                .HasMaxLength(2);

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(20);

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.HasOne("Angular7NetCoreStore.Domain.Entities.Customer")
                                .WithOne("PhoneNumber")
                                .HasForeignKey("Angular7NetCoreStore.Domain.ValueObjects.PhoneNumber", "CustomerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Angular7NetCoreStore.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CustomerId");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100);

                            b1.Property<string>("Complement")
                                .IsRequired()
                                .HasMaxLength(100);

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100);

                            b1.Property<string>("District")
                                .IsRequired()
                                .HasMaxLength(100);

                            b1.Property<string>("Number");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(30);

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200);

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20);

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.HasOne("Angular7NetCoreStore.Domain.Entities.Customer")
                                .WithOne("Address")
                                .HasForeignKey("Angular7NetCoreStore.Domain.ValueObjects.Address", "CustomerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Angular7NetCoreStore.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("Angular7NetCoreStore.Domain.Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("Angular7NetCoreStore.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Angular7NetCoreStore.Domain.Order", b =>
                {
                    b.HasOne("Angular7NetCoreStore.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Angular7NetCoreStore.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("OrderId");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100);

                            b1.Property<string>("Complement")
                                .IsRequired()
                                .HasMaxLength(100);

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100);

                            b1.Property<string>("District")
                                .IsRequired()
                                .HasMaxLength(100);

                            b1.Property<string>("Number");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(30);

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200);

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20);

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.HasOne("Angular7NetCoreStore.Domain.Order")
                                .WithOne("Address")
                                .HasForeignKey("Angular7NetCoreStore.Domain.ValueObjects.Address", "OrderId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
